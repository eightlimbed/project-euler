# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
#
# The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over
# five hundred divisors?
#

def divisor_count_slow(n)
  count = 0
  (1..n).each do |divisor|
    count += 1 if n % divisor == 0
  end
  count
end

# the method above doesn't perform well with big numbers
# too slow to return anything for this particular problem

def divisor_count(n) # returns the number of divisors of n
  count = 0 # num of divisors
  divisor = 1 # num that gets incremented
  smallest = n # smallest of the two multiples, begin at n

  while ( divisor < smallest )
    if n % divisor == 0 # if divisor is a factor of n...
      smallest = n/divisor # smallest gets chopped down by divisor
      if ( divisor == smallest )
        count += 1 # increment by one. avoid repeats
      else
        count += 2 # increment by two. one for each multiple
      end
    end
    divisor += 1 # continue the loop
  end
  count
end

triangle_number = 0
i = 1
found = false # state variable, so we know when to break the loop
until found
  triangle_number = triangle_number + i
  if divisor_count(triangle_number) <= 500
    i += 1
  else
    found = true
  end
end

p triangle_number
# => 76576500
